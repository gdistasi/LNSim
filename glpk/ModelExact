
set N;
/* nodes*/

param r{a in N, b in N}, default 0;
/* residual fund of p.c. (u,v) */ 

param P;
/* payment value to be made to destination */

var flow{a in N, b in N} >= 0;
/* variable expressing the amount paid by x to y */

/* described if a link if used or not for a payment  */
var xi{a in N, b in N} binary; 

s.t. binary{a in N, b in N}:  flow[a,b] <= xi[a,b] * r[a,b] ;

param baseSendingFee{a in N, b in N} >= 0;

/* num segments */
param sendingFeeNumRegions{a in N, b in N} integer >= 0;

/* sendingFeeLimits */
param sendingFeeLimits { a in N, b in N, p in 0..sendingFeeNumRegions[a,b]: r[a,b]>0  } >= if p = 0 then 0 else sendingFeeLimits[a,b,p-1];

/* sendingFeeRates */
param sendingFeeRates{ a in N, b in N, p in 1..sendingFeeNumRegions[a,b]: r[a,b]>0 } >= if p = 1 then 0 else sendingFeeRates[a,b,p-1];

/* 
http://homepages.rpi.edu/~mitchj/handouts/piecewise/ 
https://orinanobworld.blogspot.it/2010/10/piecewise-linear-functions-in-math.html
*/

var fee{a in N, b in N} >= 0;

var z{a in N, b in N, i in 1..sendingFeeNumRegions[a,b]} binary;

var s{a in N, b in N, i in 1..sendingFeeNumRegions[a,b]} >= 0;

/* value of the fee (only piecewise part, not the base fee) assumed at the limit points */

param yy{a in N, b in N, i in 1..sendingFeeNumRegions[a,b]+1};


s.t. z_con{a in N, b in N: r[a,b]>0}:
	sum{i in 1..sendingFeeNumRegions[a,b]} z[a,b,i] = 1;


s.t. sz_con{a in N, b in N, i in 1..sendingFeeNumRegions[a,b]: r[a,b]>0}:
	s[a,b,i] <= z[a,b,i];


s.t. sos1{a in N, b in N: r[a,b]>0}:
	flow[a,b] = sum{i in 1..sendingFeeNumRegions[a,b]} ( sendingFeeLimits[a,b,i-1] * z[a,b,i] + 
					s[a,b,i] * ( sendingFeeLimits[a,b,i] - sendingFeeLimits[a,b,i-1] ) );


s.t. sos2{a in N, b in N: r[a,b]>0}:
	fee[a,b] = sum{i in 1..sendingFeeNumRegions[a,b]} ( yy[a,b,i] * z[a,b,i] + 
																					  s[a,b,i] * ( yy[a,b,i+1] - yy[a,b,i]  )  ); 

param source in N;
/* source */

param destination in N;
/* destination */


s.t. capcon{x in N, y in N}: flow[x,y] <= r[x,y];
/* capacity constraint */

s.t. flocon{a in N: a <> source and a <> destination}: sum{x in N} flow[x,a] =   
sum{k in N}  flow[a,k]  + sum{k in N} (baseSendingFee[a,k] * xi[a,k]+ fee[a,k] ); 
/* flow conservation constraint */ 

s.t. endToEnd: sum{x in N: x <> source} flow[source,x]  - sum{x in N: x <> source} flow[x, source] = P 
+ 	sum{x in N, y in N: x <> source} (baseSendingFee[x,y] * xi[x,y] + fee[x,y] );  


s.t. endToEnd2: sum{x in N: x <> destination} flow[x, destination] -  sum{x in N} flow[destination, x]  = P;
/* end-to-end flow constraints */

minimize cost: sum{x in N} flow[source,x];
/* minimizing the amount of fees */

end;



