
set N;
/* nodes*/

param r{x in N, y in N}, default 0;
/* residual fund of p.c. (u,v) */ 


/* describes if a link is used or not for a payment */
var xi{x in N, y in N} binary;

param baseSendingFee{x in N, y in N};

param sendingFeeNumRegions{x in N, y in N} integer >= 1;

param sendingFeeRates{x in N, y in N, p in 1..sendingFeeNumRegions} >= if p = 1 then 0 else rate[x,y,p-1];

param sendingFeeLimits {x in N, y in N, p in 1..sendingFeeNumRegions} > if p = 1 then 0 else sendingFeeLimits[x,y,p-1];


param source in N;
/* source */

param destination in N;
/* destination */

param P;
/* payment value to be made to destination */

var flow{x in N, y in N} >= 0;
/* variable expressing the amount paid by x to y */

s.t. binary{x in N, y in N}: x[i,j] >= flow[x,y] 

s.t. capcon{x in N, y in N}: flow[x,y] <= r[x,y];
/* capacity constraint */



s.t. flocon{z in N: z <> source and z <> destination}: sum{x in N} (flow[x,z]) = 
					 sum{k in N} (flow[z,k] + <<{p in 1..sendingFeeNumRegions[z,k]-1} sendingFeeLimits[z,k,p]; {p in 1..sendingFeeNumRegions[z,k]} sendingFeeRates[z,k,p]>> flow[z,k] + xi[z,k] * baseSendingFee[z,k]);
/* flow conservation constraint */


s.t. endToEnd: sum{x in N: x <> source} flow[source,x]  = P + sum{x in N, y in N}(  

sum{z in N, y in N: z <> source} <<{p in 1..sendingFeeNumRegions[z,y]-1} sendingFeeLimits[z,y,p]; {p in 1..sendingFeeNumRegions[z,y]} sendingFeeRates[z,y,p]>> flow[z,y] + xi[z,y] * baseSendingFee[z,y] ; 


s.t. endToEnd2: sum{x in N: x <> destination} flow[x, destination] = P;
/* end-to-end flow constraints */


minimize cost: sum{x in N} flow[source,x];
/* minimizing the amount of fees */

end;

 

